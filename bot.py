import warnings
import logging

from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)

from gpt import ChatGptService
from util import (
    load_message,
    send_text,
    send_image,
    show_main_menu,
    send_text_buttons,
    load_prompt,
    is_correct_answer,
    dialog_user_info_to_str,
    Dialog,
)
from credentials import CHATGPT_TOKEN, BOT_TOKEN

import os
import tempfile
import subprocess
import uuid

warnings.filterwarnings("ignore", category=UserWarning)

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°—Ç–∞–Ω–∏ –¥—ñ–∞–ª–æ–≥—É
(
    MAIN,
    RANDOM,
    GPT,
    TALK_CHOICE,
    TALK_CHAT,
    QUIZ_THEME,
    QUIZ_ANSWER,
    TRANSLATE_CHOICE,
    TRANSLATE_INPUT,
    VOICE_CHAT,
) = range(10)

dialog = Dialog()
chat_gpt = ChatGptService(CHATGPT_TOKEN)


def get_personalities() -> dict:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ª–æ–≤–Ω–∏–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –æ—Å–æ–±–∏—Å—Ç–æ—Å—Ç–µ–π –¥–ª—è —Ä–µ–∂–∏–º—É |–î—ñ–∞–ª–æ–≥ –∑ –≤—ñ–¥–æ–º–æ—é –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—é|
    """
    return {
        "talk_cobain": "–ö—É—Ä—Ç –ö–æ–±–µ–π–Ω",
        "talk_hawking": "–°—Ç—ñ–≤–µ–Ω –•–æ–∫—ñ–Ω–≥",
        "talk_nietzsche": "–§—Ä—ñ–¥—Ä—ñ—Ö –ù—ñ—Ü—à–µ",
        "talk_queen": "–Ñ–ª–∏–∑–∞–≤–µ—Ç–∞ II",
        "talk_tolkien": "–î–∂–æ–Ω –¢–æ–ª–∫—ñ–Ω",
        "end_btn": "–î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é",
    }


def get_quiz_themes() -> dict:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ª–æ–≤–Ω–∏–∫ —Ç–µ–º –¥–ª—è —Ä–µ–∂–∏–º—É |–ö–≤—ñ–∑|
    """
    return {
        "quiz_prog": "–ü—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –º–æ–≤–æ—é Python",
        "quiz_math": "–ú–∞—Ç–µ–º–∞—Ç–∏—á–Ω—ñ —Ç–µ–æ—Ä—ñ—ó",
        "quiz_biology": "–ë—ñ–æ–ª–æ–≥—ñ—è",
        "end_btn": "–î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é",
    }


def get_translation_languages() -> dict:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ª–æ–≤–Ω–∏–∫ –º–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É.
    """
    return {
        "to_en": "–ê–Ω–≥–ª—ñ–π—Å—å–∫–∞",
        "to_uk": "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",
        "to_cs": "–ß–µ—Å—å–∫–∞",
        "to_es": "–Ü—Å–ø–∞–Ω—Å—å–∫–∞",
        "to_fr": "–§—Ä–∞–Ω—Ü—É–∑—å–∫–∞",
        "end_btn": "–î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é",
    }


async def answer_callback(update: Update) -> None:
    """
    –ë–µ–∑–ø–µ—á–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î callback-–∑–∞–ø–∏—Ç.
    """
    if update.callback_query:
        await update.callback_query.answer()
        logger.debug("Callback –∑–∞–ø–∏—Ç –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ.")


async def unknown_command(
    update: Update, context: ContextTypes.DEFAULT_TYPE, state: int
) -> int:
    """
    –ù–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –Ω–µ–≤—ñ–¥–æ–º–æ—ó –∫–æ–º–∞–Ω–¥–∏ —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –ø–µ—Ä–µ–¥–∞–Ω–∏–π —Å—Ç–∞–Ω.
    """
    logger.info("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç—Ä–∏–º–∞–Ω–∞.")
    await send_text(update, context, "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞.")
    return state


# === |–ü–æ—á–∞—Ç–æ–∫ –¥—ñ–∞–ª–æ–≥—É –∑ chat-bot / –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é| ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –¥—ñ–∞–ª–æ–≥, –æ—á–∏—â–∞—î –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –ø–æ–∫–∞–∑—É—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.
    """
    logger.info("–ó–∞–ø—É—Å–∫ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.")
    context.user_data.clear()
    text = load_message("main")
    await send_image(update, context, "main")
    await send_text(update, context, text)
    await show_main_menu(
        update,
        context,
        {
            "start": "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é",
            "random": "–î—ñ–∑–Ω–∞—Ç–∏—Å—è –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ñ–∞–∫—Ç üß†",
            "gpt": "–ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è —á–∞—Ç—É GPT ü§ñ",
            "talk": "–ü–æ–≥–æ–≤–æ—Ä–∏—Ç–∏ –∑ –≤—ñ–¥–æ–º–æ—é –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—é üë§",
            "quiz": "–í–∑—è—Ç–∏ —É—á–∞—Å—Ç—å —É –∫–≤—ñ–∑—ñ ‚ùì",
            "translater": "–ü–µ—Ä–µ–∫–ª–∞–¥–∞—á üåê",
            "voicechat": "–ì–æ–ª–æ—Å–æ–≤–∏–π —á–∞—Ç –∑ GPT üéôÔ∏è",
            "cancel": "–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥ –∑ chat-bot",
        },
    )
    return MAIN


async def main_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –ø—É–Ω–∫—Ç—É –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.
    """
    query = update.callback_query.data
    logger.info(f"–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é: –≤–∏–±—Ä–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É '%s'.", query)
    await answer_callback(update)

    if query == "random":
        return await random_start(update, context)
    elif query == "gpt":
        return await gpt_start(update, context)
    elif query == "talk":
        return await talk_start(update, context)
    elif query == "quiz":
        return await quiz_start(update, context)
    elif query == "translater":
        return await translator_start(update, context)
    elif query == "voicechat":
        return await voice_chat_start(update, context)
    else:
        return await unknown_command(update, context, MAIN)


# === –†–µ–∂–∏–º |–î—ñ–∑–Ω–∞—Ç–∏—Å—å –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ñ–∞–∫—Ç| ===
async def random_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ó–∞–ø—É—Å–∫–∞—î —Ä–µ–∂–∏–º |–î—ñ–∑–Ω–∞—Ç–∏—Å—å –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ñ–∞–∫—Ç|
    """
    logger.info('–†–µ–∂–∏–º "–î—ñ–∑–Ω–∞—Ç–∏—Å—å –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ñ–∞–∫—Ç" –∑–∞–ø—É—â–µ–Ω–æ.')
    text = load_message("random")
    await send_image(update, context, "random")
    await send_text(update, context, text)
    prompt = load_prompt("random")
    content = await chat_gpt.add_message(prompt)
    await send_text_buttons(
        update, context, content, {"more_btn": "–•–æ—á—É —â–µ —Ñ–∞–∫—Ç", "end_btn": "–ó–∞–∫—ñ–Ω—á–∏—Ç–∏"}
    )
    return RANDOM


async def random_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    Callback –¥–ª—è —Ä–µ–∂–∏–º—É |–î—ñ–∑–Ω–∞—Ç–∏—Å—å –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ñ–∞–∫—Ç|
    """
    query = update.callback_query.data
    logger.info("–†–µ–∂–∏–º \"–î—ñ–∑–Ω–∞—Ç–∏—Å—å –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ñ–∞–∫—Ç\": callback –æ—Ç—Ä–∏–º–∞–Ω–æ '%s'.", query)
    await answer_callback(update)
    if query == "more_btn":
        return await random_start(update, context)
    elif query == "end_btn":
        return await start(update, context)
    else:
        return await unknown_command(update, context, RANDOM)


# === –†–µ–∂–∏–º |GPT-–ß–ê–¢| ===
async def gpt_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ó–∞–ø—É—Å–∫–∞—î —Ä–µ–∂–∏–º |GPT-—á–∞—Ç|
    """
    logger.info('–†–µ–∂–∏–º "GPT-—á–∞—Ç" –∑–∞–ø—É—â–µ–Ω–æ.')
    context.user_data["mode"] = "gpt"
    dialog.clear_history(update.effective_chat.id)
    prompt = load_prompt("gpt")
    dialog.add_message(update.effective_chat.id, "system", prompt)
    await send_image(update, context, "gpt")
    text = load_message("gpt")
    content = await chat_gpt.send_question(prompt, text)
    await send_text_buttons(update, context, content, {"end_btn": "–ó–∞–∫—ñ–Ω—á–∏—Ç–∏"})
    return GPT


async def gpt_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É —Ä–µ–∂–∏–º—ñ |GPT-—á–∞—Ç—É|
    """
    if not update.message or not update.message.text:
        return GPT
    user_message = update.message.text
    logger.info("GPT-—á–∞—Ç: –æ—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: %s", user_message)
    dialog.add_message(update.effective_chat.id, "user", user_message)
    try:
        content = await chat_gpt.add_message(user_message)
        logger.debug("GPT-—á–∞—Ç: –æ—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –º–æ–¥–µ–ª—ñ.")
        await send_text_buttons(update, context, content, {"end_btn": "–ó–∞–∫—ñ–Ω—á–∏—Ç–∏"})
    except Exception as e:
        logger.error("–ü–æ–º–∏–ª–∫–∞ –≤ GPT-—á–∞—Ç: %s", e)
        await send_text(update, context, f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")
    return GPT


async def gpt_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    Callback –¥–ª—è —Ä–µ–∂–∏–º—É |GPT-—á–∞—Ç—É|
    """
    query = update.callback_query.data
    logger.info("GPT-—á–∞—Ç callback: %s", query)
    await answer_callback(update)
    if query == "end_btn":
        return await start(update, context)
    return GPT


# === –†–µ–∂–∏–º |–ü–æ–≥–æ–≤–æ—Ä–∏—Ç–∏ –∑ –≤—ñ–¥–æ–º–æ—é –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—é| ===
async def talk_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ó–∞–ø—É—Å–∫–∞—î —Ä–µ–∂–∏–º |–ü–æ–≥–æ–≤–æ—Ä–∏—Ç–∏ –∑ –≤—ñ–¥–æ–º–æ—é –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—é|
    """
    logger.info('–†–µ–∂–∏–º "–ü–æ–≥–æ–≤–æ—Ä–∏—Ç–∏ –∑ –≤—ñ–¥–æ–º–æ—é –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—é" –∑–∞–ø—É—â–µ–Ω–æ.')
    context.user_data["mode"] = "talk"
    await send_image(update, context, "talk")
    text = load_message("talk")
    personalities = get_personalities()
    await send_text_buttons(update, context, text, personalities)
    return TALK_CHOICE


async def talk_choice_callback(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """
    –û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –æ—Å–æ–±–∏—Å—Ç–æ—Å—Ç—ñ –¥–ª—è –¥—ñ–∞–ª–æ–≥—É.
    """
    query = update.callback_query.data
    logger.info("–í–∏–±—ñ—Ä –æ—Å–æ–±–∏—Å—Ç–æ—Å—Ç—ñ: %s", query)
    await answer_callback(update)
    if query == "end_btn":
        return await start(update, context)
    if query.startswith("talk_"):
        personality_data = {
            "talk_cobain": ("talk_cobain", "–ö—É—Ä—Ç –ö–æ–±–µ–π–Ω"),
            "talk_hawking": ("talk_hawking", "–°—Ç—ñ–≤–µ–Ω –•–æ–∫—ñ–Ω–≥"),
            "talk_nietzsche": ("talk_nietzsche", "–§—Ä—ñ–¥—Ä—ñ—Ö –ù—ñ—Ü—à–µ"),
            "talk_queen": ("talk_queen", "–Ñ–ª–∏–∑–∞–≤–µ—Ç–∞ II"),
            "talk_tolkien": ("talk_tolkien", "–î–∂–æ–Ω –¢–æ–ª–∫—ñ–Ω"),
        }
        if query in personality_data:
            file_name, display_name = personality_data[query]
            logger.info("–û–±—Ä–∞–Ω–æ –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—å: %s", display_name)
            await send_image(update, context, file_name)
            prompt = load_prompt(file_name)
            dialog.clear_history(update.effective_chat.id)
            dialog.add_message(update.effective_chat.id, "system", prompt)
            content = await chat_gpt.send_question(prompt, "")
            await send_text_buttons(
                update,
                context,
                content,
                {"talk": "–Ü–Ω—à–∞ –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—å", "end_btn": "–ó–∞–∫—ñ–Ω—á–∏—Ç–∏"},
            )
            return TALK_CHAT
    return await unknown_command(update, context, TALK_CHOICE)


async def talk_chat_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É —Ä–µ–∂–∏–º—ñ |–ü–æ–≥–æ–≤–æ—Ä–∏—Ç–∏ –∑ –≤—ñ–¥–æ–º–æ—é –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—é|
    """
    if not update.message or not update.message.text:
        return TALK_CHAT
    user_message = update.message.text
    logger.info(
        '"–ü–æ–≥–æ–≤–æ—Ä–∏—Ç–∏ –∑ –≤—ñ–¥–æ–º–æ—é –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—é": –æ—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: %s', user_message
    )
    dialog.add_message(update.effective_chat.id, "user", user_message)
    try:
        content = await chat_gpt.add_message(user_message)
        await send_text_buttons(
            update,
            context,
            content,
            {"talk": "–Ü–Ω—à–∞ –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—å", "end_btn": "–ó–∞–∫—ñ–Ω—á–∏—Ç–∏"},
        )
    except Exception as e:
        logger.error('–ü–æ–º–∏–ª–∫–∞ –≤ —Ä–µ–∂–∏–º—ñ "–ü–æ–≥–æ–≤–æ—Ä–∏—Ç–∏ –∑ –≤—ñ–¥–æ–º–æ—é –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—é": %s', e)
        await send_text(update, context, f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")
    return TALK_CHAT


async def talk_chat_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    Callback –¥–ª—è —Ä–µ–∂–∏–º—É |–ü–æ–≥–æ–≤–æ—Ä–∏—Ç–∏ –∑ –≤—ñ–¥–æ–º–æ—é –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—é|
    """
    query = update.callback_query.data
    logger.info('"–ü–æ–≥–æ–≤–æ—Ä–∏—Ç–∏ –∑ –≤—ñ–¥–æ–º–æ—é –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—é" callback: %s', query)
    await answer_callback(update)
    if query == "end_btn":
        return await start(update, context)
    elif query == "talk":
        return await talk_start(update, context)
    return TALK_CHAT


# === –†–µ–∂–∏–º |–ö–≤—ñ–∑| ===
async def quiz_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ó–∞–ø—É—Å–∫–∞—î —Ä–µ–∂–∏–º |–ö–≤—ñ–∑|
    """
    logger.info('–†–µ–∂–∏–º "–ö–≤—ñ–∑" –∑–∞–ø—É—â–µ–Ω–æ.')
    context.user_data["mode"] = "quiz"
    dialog.clear_history(update.effective_chat.id)
    quiz_themes = get_quiz_themes()
    await send_image(update, context, "quiz")
    text = load_message("quiz")
    await send_text_buttons(update, context, text, quiz_themes)
    return QUIZ_THEME


async def quiz_theme_callback(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """
    –û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä —Ç–µ–º–∏ –∫–≤—ñ–∑—É —Ç–∞ –≥–µ–Ω–µ—Ä—É—î –ø–∏—Ç–∞–Ω–Ω—è.
    """
    query = update.callback_query.data
    logger.info("–†–µ–∂–∏–º \"–ö–≤—ñ–∑\": –≤–∏–±—ñ—Ä —Ç–µ–º–∏ –∞–±–æ –∫–æ–º–∞–Ω–¥–∞ '%s'", query)
    await answer_callback(update)
    quiz_data = {
        "quiz_prog": ("quiz_prog", "–ü—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –º–æ–≤–æ—é Python"),
        "quiz_math": ("quiz_math", "–ú–∞—Ç–µ–º–∞—Ç–∏—á–Ω—ñ —Ç–µ–æ—Ä—ñ—ó"),
        "quiz_biology": ("quiz_biology", "–ë—ñ–æ–ª–æ–≥—ñ—è"),
    }
    if query == "end_btn":
        return await start(update, context)
    elif query == "quiz":
        return await quiz_start(update, context)
    elif query in quiz_data or query == "quiz_more":
        if query in quiz_data:
            # –í–∏–±—ñ—Ä —Ç–µ–º–∏ –≤–ø–µ—Ä—à–µ
            file_name, display_name = quiz_data[query]
            context.user_data["theme"] = query
            dialog.clear_history(update.effective_chat.id)
            logger.info("–†–µ–∂–∏–º \"–ö–≤—ñ–∑\": –æ–±—Ä–∞–Ω–∞ —Ç–µ–º–∞ '%s'", display_name)
        else:
            # –ü—Ä–∏ "quiz_more" —Ç–µ–º–∞ –≤–∂–µ –∑–±–µ—Ä–µ–∂–µ–Ω–∞
            current_theme = context.user_data.get("theme")
            if not current_theme or current_theme not in quiz_data:
                await send_text(update, context, "–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∏ —Å–ø–æ—á–∞—Ç–∫—É.")
                return QUIZ_THEME
            file_name, display_name = quiz_data[current_theme]
            logger.info("–†–µ–∂–∏–º \"–ö–≤—ñ–∑\": –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è —Ç–µ–º–∏ '%s'", display_name)
        await send_image(update, context, file_name)
        base_prompt = load_prompt(file_name)
        dialog.add_message(update.effective_chat.id, "system", base_prompt)
        content = await chat_gpt.send_question(base_prompt, "")
        question_text = content.strip()
        while dialog.has_question_been_asked(update.effective_chat.id, question_text):
            new_q = await chat_gpt.send_question(
                f"–ó–≥–µ–Ω–µ—Ä—É–π –Ω–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è —Ç–µ–º–∏ {display_name}", ""
            )
            question_text = new_q.strip()
            logger.debug('–†–µ–∂–∏–º "–ö–≤—ñ–∑": –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –Ω–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è.')
        dialog.add_quiz_question(update.effective_chat.id, question_text)

        expected_prompt = (
            f"–ü–∏—Ç–∞–Ω–Ω—è: {question_text}\n"
            "–Ø–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤–≤–∞–∂–∞—é—Ç—å—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –¥–ª—è —Ü—å–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è? "
            "–¢–∏ –ø–æ–≤–∏–Ω–µ–Ω –º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –º–æ–∂–ª–∏–≤–∏—Ö –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π —á–µ—Ä–µ–∑ –∫–æ–º—É. "
            "–í—Å—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –º–∞—é—Ç—å –±—É—Ç–∏ –∫–æ—Ä–æ—Ç–∫–∏–º–∏, –Ω–µ –±—ñ–ª—å—à–µ 2-—Ö —Å–ª—ñ–≤."
        )
        chat_gpt.message_list = []
        expected_response = await chat_gpt.send_question(expected_prompt, "")
        expected_answers = [ans.strip().lower() for ans in expected_response.split(",")]
        context.user_data["expected_answers"] = expected_answers
        logger.info('–†–µ–∂–∏–º "–ö–≤—ñ–∑": –∑–±–µ—Ä–µ–∂–µ–Ω–æ –æ—á—ñ–∫—É–≤–∞–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.')

        await send_text_buttons(
            update,
            context,
            question_text,
            {
                "quiz_more": "–©–µ –ø–∏—Ç–∞–Ω–Ω—è",
                "quiz": "–û–±—Ä–∞—Ç–∏ —ñ–Ω—à—É —Ç–µ–º—É",
                "end_btn": "–ó–∞–∫—ñ–Ω—á–∏—Ç–∏",
            },
        )
        return QUIZ_ANSWER
    else:
        return await unknown_command(update, context, QUIZ_THEME)


async def quiz_answer_handler(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """
    –û–±—Ä–æ–±–ª—è—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –∫–≤—ñ–∑—É –≤—ñ–¥ GPT.
    """
    if not update.message or not update.message.text:
        return QUIZ_ANSWER
    user_answer = update.message.text.strip()
    logger.info("–†–µ–∂–∏–º \"–ö–≤—ñ–∑\": –æ—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å '%s'", user_answer)
    if len(user_answer.split()) > 2:
        await send_text(
            update,
            context,
            "–û—á—ñ–∫—É—î—Ç—å—Å—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É –≤–∏–≥–ª—è–¥—ñ –Ω–µ –±—ñ–ª—å—à–µ 2-—Ö —Å–ª—ñ–≤.",
        )
        return QUIZ_ANSWER

    expected_answers = context.user_data.get("expected_answers", [])
    if is_correct_answer(user_answer, expected_answers):
        dialog.increment_correct_answers(update.effective_chat.id)
        correct_count = dialog.get_correct_answers(update.effective_chat.id)
        logger.info(
            '–†–µ–∂–∏–º "–ö–≤—ñ–∑": –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–∞–≤–∏–ª—å–Ω–∞. –ü–æ—Ç–æ—á–Ω–∏–π –ª—ñ—á–∏–ª—å–Ω–∏–∫: %d', correct_count
        )
        await send_text_buttons(
            update,
            context,
            f"–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–∞–≤–∏–ª—å–Ω–∞! üéâ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: {correct_count}",
            {
                "quiz_more": "–©–µ –ø–∏—Ç–∞–Ω–Ω—è",
                "quiz": "–û–±—Ä–∞—Ç–∏ —ñ–Ω—à—É —Ç–µ–º—É",
                "end_btn": "–ó–∞–∫—ñ–Ω—á–∏—Ç–∏",
            },
        )
    else:
        logger.info(
            '–†–µ–∂–∏–º "–ö–≤—ñ–∑": –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞. –û—á—ñ–∫—É–≤–∞–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: %s',
            expected_answers,
        )
        await send_text_buttons(
            update,
            context,
            f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {', '.join(expected_answers)}",
            {
                "quiz_more": "–©–µ –ø–∏—Ç–∞–Ω–Ω—è",
                "quiz": "–û–±—Ä–∞—Ç–∏ —ñ–Ω—à—É —Ç–µ–º—É",
                "end_btn": "–ó–∞–∫—ñ–Ω—á–∏—Ç–∏",
            },
        )
    return QUIZ_THEME


# === –†–µ–∂–∏–º |–ü–µ—Ä–µ–∫–ª–∞–¥–∞—á| ===
async def translator_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ó–∞–ø—É—Å–∫–∞—î —Ä–µ–∂–∏–º /translater (–ø–µ—Ä–µ–∫–ª–∞–¥–∞—á). –ü—Ä–æ–ø–æ–Ω—É—î –≤–∏–±—Ä–∞—Ç–∏ –º–æ–≤—É –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É.
    """
    logger.info("–ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º—É –ü–µ—Ä–µ–∫–ª–∞–¥–∞—á.")
    context.user_data["mode"] = "translater"
    await send_image(update, context, "translater")
    text = "–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É, –Ω–∞ —è–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–∫–ª–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç:"
    languages = get_translation_languages()
    await send_text_buttons(update, context, text, languages)
    return TRANSLATE_CHOICE


async def translator_choice_callback(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """
    –û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –º–æ–≤–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É.
    """
    query = update.callback_query.data
    logger.info("–ü–µ—Ä–µ–∫–ª–∞–¥–∞—á: –≤–∏–±—ñ—Ä –º–æ–≤–∏ '%s'", query)
    await answer_callback(update)
    if query == "end_btn":
        return await start(update, context)
    elif query == "translater":
        return await translator_start(update, context)

    languages = get_translation_languages()
    context.user_data["language_to_cmd"] = query
    context.user_data["language_to"] = languages.get(query, query)

    await send_text(update, context, "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–∫–ª–∞—Å—Ç–∏:")
    return TRANSLATE_INPUT


async def translator_input_message(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """
    –û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–∫–ª–∞—Å—Ç–∏, —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î –ø–µ—Ä–µ–∫–ª–∞–¥.
    """
    if not update.message or not update.message.text:
        return TRANSLATE_INPUT
    original_text = update.message.text.strip()
    logger.info("–ü–µ—Ä–µ–∫–ª–∞–¥–∞—á: –æ—Ç—Ä–∏–º–∞–Ω–æ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É: %s", original_text)
    context.user_data["text_to_translate"] = original_text
    context.user_data["language_from"] = "auto"

    # –§–æ—Ä–º—É—î—Ç—å—Å—è –∑–∞–ø–∏—Ç –¥–æ ChatGPT –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É
    original_prompt = load_prompt("translater")
    target_language = context.user_data.get("language_to", "–ê–Ω–≥–ª—ñ–π—Å—å–∫–∞")
    prompt_text = original_prompt.format(target_language=target_language)
    logger.info("–ü–µ—Ä–µ–∫–ª–∞–¥–∞—á: —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –∑ prompt: %s", prompt_text)
    translation = await chat_gpt.send_question(prompt_text, original_text)

    # –§–æ—Ä–º—É—é—Ç—å—Å—è –¥–∞–Ω—ñ –¥—ñ–∞–ª–æ–≥—É –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    translation_info = {
        "language_from": context.user_data.get("language_from", "auto"),
        "language_to": target_language,
        "text_to_translate": original_text,
    }
    info_str = dialog_user_info_to_str(translation_info)

    # –ù–∞–¥—Å–∏–ª–∞—î—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–∫–ª–∞–¥—É —Ä–∞–∑–æ–º –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
    result_text = f"{translation}\n\n---\n{info_str}"
    await send_text_buttons(
        update,
        context,
        result_text,
        {"translater": "–ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É", "end_btn": "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"},
    )
    return TRANSLATE_CHOICE


# === Voice-chat ===
async def voice_chat_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ó–∞–ø—É—Å–∫–∞—î —Ä–µ–∂–∏–º –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç—É –∑ GPT.
    """
    logger.info("–†–µ–∂–∏–º –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç—É –∑–∞–ø—É—â–µ–Ω–æ.")
    await send_text(
        update,
        context,
        "–î–∞–≤–∞–π—Ç–µ —Ä–æ–∑–ø–æ—á–Ω–µ–º–æ –Ω–∞—à –≥–æ–ª–æ—Å–æ–≤–∏–π —á–∞—Ç. –ß–µ–∫–∞—é –Ω–∞ –≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.",
    )
    await send_image(update, context, "voice_chat")
    await send_text_buttons(
        update,
        context,
        "–Ø–∫—â–æ —Ö–æ—á–µ—à –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –Ω–∞—à –¥—ñ–∞–ª–æ–≥ —Ç–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é, —Ç–∏—Å–Ω–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ",
        {
            "end_btn": "–ó–∞–∫—ñ–Ω—á–∏—Ç–∏",
        },
    )

    return VOICE_CHAT


async def voice_chat_callback(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """
    –û–±—Ä–æ–±–ª—è—î callback –≤—ñ–¥ –∫–Ω–æ–ø–∫–∏ —É —Ä–µ–∂–∏–º—ñ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç—É ("end_btn").
    """
    query = update.callback_query.data
    logger.info("voice_chat_callback: –æ—Ç—Ä–∏–º–∞–Ω–æ callback '%s'", query)
    await update.callback_query.answer()

    if query == "end_btn":
        return await start(update, context)

    return VOICE_CHAT


async def voice_message_handler(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """
    –û–±—Ä–æ–±–ª—è—î –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É —Ä–µ–∂–∏–º—ñ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç—É.

    1. –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ Telegram —ñ —Ç–∏–º—á–∞—Å–æ–≤–æ –∑–±–µ—Ä—ñ–≥–∞—î —É —Ñ–æ—Ä–º–∞—Ç—ñ OGG.
    2. –ö–æ–Ω–≤–µ—Ä—Ç—É—î OGG ‚Üí WAV –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é ffmpeg.
    3. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î SpeechRecognition –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–ª–µ–Ω–Ω—è (Google API, —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞).
    4. –í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Ç–µ–∫—Å—Ç (–ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–µ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è) –¥–æ ChatGPT —ñ –æ—Ç—Ä–∏–º—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É —Ç–µ–∫—Å—Ç–æ–≤—ñ–π —Ñ–æ—Ä–º—ñ.
    5. –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î —Ç–µ–∫—Å—Ç ChatGPT —É –≥–æ–ª–æ—Å (gTTS) —Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç—É—î —É —Ñ–æ—Ä–º–∞—Ç OGG, —â–æ–± –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ.
    6. –í–∏–¥–∞–ª—è—î —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏, —â–æ–± –Ω–µ –∑–∞—Å–º—ñ—á—É–≤–∞—Ç–∏ —Ñ–∞–π–ª–æ–≤—É —Å–∏—Å—Ç–µ–º—É.
    7. –ü–æ–≤–µ—Ä—Ç–∞—î —Å—Ç–∞–Ω VOICE_CHAT, –¥–æ–∑–≤–æ–ª—è—é—á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –≥–æ–ª–æ—Å–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∞–±–æ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥.
    """
    logger.info("–û—Ç—Ä–∏–º–∞–Ω–æ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
    from speech_recognition import Recognizer, AudioFile, UnknownValueError
    from gtts import gTTS

    voice = update.message.voice
    file_id = voice.file_id
    new_file = await context.bot.get_file(file_id)

    with tempfile.NamedTemporaryFile(suffix=".ogg", delete=False) as temp_ogg:
        ogg_path = temp_ogg.name
    await new_file.download_to_drive(ogg_path)

    with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as temp_wav:
        wav_path = temp_wav.name

    subprocess.run(["ffmpeg", "-y", "-i", ogg_path, wav_path], check=True)

    recognizer = Recognizer()

    with AudioFile(wav_path) as source:
        audio_data = recognizer.record(source)

    try:
        user_text = recognizer.recognize_google(audio_data, language="uk-UA")  # type: ignore
        logger.info(f"–†–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç: {user_text}")
    except UnknownValueError:
        await send_text(
            update, context, "–í–∏–±–∞—á—Ç–µ, –Ω–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."
        )

        for path in [ogg_path, wav_path]:
            if os.path.exists(path):
                os.remove(path)
        return VOICE_CHAT

    gpt_response = await chat_gpt.add_message(user_text)

    tts = gTTS(text=gpt_response, lang="uk")
    with tempfile.NamedTemporaryFile(suffix=".mp3", delete=False) as temp_mp3:
        mp3_path = temp_mp3.name
    tts.save(mp3_path)

    ogg_filename = f"gpt_reply_{uuid.uuid4().hex}.ogg"
    subprocess.run(
        ["ffmpeg", "-y", "-i", mp3_path, "-c:a", "libopus", ogg_filename], check=True
    )

    with open(ogg_filename, "rb") as ogg_file:
        await context.bot.send_voice(chat_id=update.effective_chat.id, voice=ogg_file)

    for path in [ogg_path, wav_path, mp3_path, ogg_filename]:
        if os.path.exists(path):
            os.remove(path)

    buttons = {"end_btn": "–ó–∞–∫—ñ–Ω—á–∏—Ç–∏"}
    await send_text_buttons(
        update,
        context,
        "–ù–∞–¥—Å–∏–ª–∞–π –Ω–æ–≤–µ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∞–±–æ —Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É, —â–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥.",
        buttons,
    )

    return VOICE_CHAT


# === –§–æ–ª–±–µ–∫ ===
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü—Ä–∏–º—É—Å–æ–≤–æ –∑–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è –¥—ñ–∞–ª–æ–≥ –∑ telegram chat-bot –ø—Ä–∏ –æ–±—Ä–∞–Ω–Ω—ñ —É –º–µ–Ω—é –∞–±–æ —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ–º—É –≤–≤–µ–¥–µ–Ω–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ /cancel.
    """
    logger.info("–î—ñ–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∫–æ–º–∞–Ω–¥–æ—é /cancel.")
    await send_text(update, context, "–î—ñ–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
    return ConversationHandler.END


conv_handler = ConversationHandler(
    entry_points=[
        CommandHandler("start", start),
        CommandHandler("random", random_start),
        CommandHandler("gpt", gpt_start),
        CommandHandler("talk", talk_start),
        CommandHandler("quiz", quiz_start),
        CommandHandler("translater", translator_start),
        CommandHandler("voicechat", voice_chat_start),
    ],
    states={
        MAIN: [CallbackQueryHandler(main_menu_callback)],
        RANDOM: [CallbackQueryHandler(random_callback)],
        GPT: [
            MessageHandler(filters.TEXT & (~filters.COMMAND), gpt_message),
            CallbackQueryHandler(gpt_callback),
        ],
        TALK_CHOICE: [CallbackQueryHandler(talk_choice_callback)],
        TALK_CHAT: [
            MessageHandler(filters.TEXT & (~filters.COMMAND), talk_chat_message),
            CallbackQueryHandler(talk_chat_callback),
        ],
        QUIZ_THEME: [CallbackQueryHandler(quiz_theme_callback)],
        QUIZ_ANSWER: [
            MessageHandler(filters.TEXT & (~filters.COMMAND), quiz_answer_handler),
            CallbackQueryHandler(quiz_theme_callback),
        ],
        TRANSLATE_CHOICE: [CallbackQueryHandler(translator_choice_callback)],
        TRANSLATE_INPUT: [
            MessageHandler(filters.TEXT & (~filters.COMMAND), translator_input_message)
        ],
        VOICE_CHAT: [
            MessageHandler(filters.VOICE, voice_message_handler),
            CallbackQueryHandler(voice_chat_callback),
        ],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
    per_chat=True,
    allow_reentry=True,
)

app = ApplicationBuilder().token(BOT_TOKEN).build()
app.add_handler(conv_handler)

logger.info("–ß–∞—Ç-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ.")
app.run_polling()
